{
  "version": 3,
  "sources": ["../../backo2/index.js", "../../eventemitter3/index.js", "../../subscriptions-transport-ws/src/utils/is-string.ts", "../../subscriptions-transport-ws/src/utils/is-object.ts", "../../symbol-observable/es/ponyfill.js", "../../symbol-observable/es/index.js", "../../subscriptions-transport-ws/src/protocol.ts", "../../subscriptions-transport-ws/src/defaults.ts", "../../subscriptions-transport-ws/src/message-types.ts", "../../subscriptions-transport-ws/src/client.ts", "../../@apollo/src/link/ws/index.ts"],
  "sourcesContent": ["\n/**\n * Expose `Backoff`.\n */\n\nmodule.exports = Backoff;\n\n/**\n * Initialize backoff timer with `opts`.\n *\n * - `min` initial timeout in milliseconds [100]\n * - `max` max timeout [10000]\n * - `jitter` [0]\n * - `factor` [2]\n *\n * @param {Object} opts\n * @api public\n */\n\nfunction Backoff(opts) {\n  opts = opts || {};\n  this.ms = opts.min || 100;\n  this.max = opts.max || 10000;\n  this.factor = opts.factor || 2;\n  this.jitter = opts.jitter > 0 && opts.jitter <= 1 ? opts.jitter : 0;\n  this.attempts = 0;\n}\n\n/**\n * Return the backoff duration.\n *\n * @return {Number}\n * @api public\n */\n\nBackoff.prototype.duration = function(){\n  var ms = this.ms * Math.pow(this.factor, this.attempts++);\n  if (this.jitter) {\n    var rand =  Math.random();\n    var deviation = Math.floor(rand * this.jitter * ms);\n    ms = (Math.floor(rand * 10) & 1) == 0  ? ms - deviation : ms + deviation;\n  }\n  return Math.min(ms, this.max) | 0;\n};\n\n/**\n * Reset the number of attempts.\n *\n * @api public\n */\n\nBackoff.prototype.reset = function(){\n  this.attempts = 0;\n};\n\n/**\n * Set the minimum duration\n *\n * @api public\n */\n\nBackoff.prototype.setMin = function(min){\n  this.ms = min;\n};\n\n/**\n * Set the maximum duration\n *\n * @api public\n */\n\nBackoff.prototype.setMax = function(max){\n  this.max = max;\n};\n\n/**\n * Set the jitter\n *\n * @api public\n */\n\nBackoff.prototype.setJitter = function(jitter){\n  this.jitter = jitter;\n};\n\n", "'use strict';\n\nvar has = Object.prototype.hasOwnProperty\n  , prefix = '~';\n\n/**\n * Constructor to create a storage for our `EE` objects.\n * An `Events` instance is a plain object whose properties are event names.\n *\n * @constructor\n * @private\n */\nfunction Events() {}\n\n//\n// We try to not inherit from `Object.prototype`. In some engines creating an\n// instance in this way is faster than calling `Object.create(null)` directly.\n// If `Object.create(null)` is not supported we prefix the event names with a\n// character to make sure that the built-in object properties are not\n// overridden or used as an attack vector.\n//\nif (Object.create) {\n  Events.prototype = Object.create(null);\n\n  //\n  // This hack is needed because the `__proto__` property is still inherited in\n  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.\n  //\n  if (!new Events().__proto__) prefix = false;\n}\n\n/**\n * Representation of a single event listener.\n *\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} [once=false] Specify if the listener is a one-time listener.\n * @constructor\n * @private\n */\nfunction EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n\n/**\n * Add a listener for a given event.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} once Specify if the listener is a one-time listener.\n * @returns {EventEmitter}\n * @private\n */\nfunction addListener(emitter, event, fn, context, once) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('The listener must be a function');\n  }\n\n  var listener = new EE(fn, context || emitter, once)\n    , evt = prefix ? prefix + event : event;\n\n  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;\n  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);\n  else emitter._events[evt] = [emitter._events[evt], listener];\n\n  return emitter;\n}\n\n/**\n * Clear event by name.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} evt The Event name.\n * @private\n */\nfunction clearEvent(emitter, evt) {\n  if (--emitter._eventsCount === 0) emitter._events = new Events();\n  else delete emitter._events[evt];\n}\n\n/**\n * Minimal `EventEmitter` interface that is molded against the Node.js\n * `EventEmitter` interface.\n *\n * @constructor\n * @public\n */\nfunction EventEmitter() {\n  this._events = new Events();\n  this._eventsCount = 0;\n}\n\n/**\n * Return an array listing the events for which the emitter has registered\n * listeners.\n *\n * @returns {Array}\n * @public\n */\nEventEmitter.prototype.eventNames = function eventNames() {\n  var names = []\n    , events\n    , name;\n\n  if (this._eventsCount === 0) return names;\n\n  for (name in (events = this._events)) {\n    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n  }\n\n  if (Object.getOwnPropertySymbols) {\n    return names.concat(Object.getOwnPropertySymbols(events));\n  }\n\n  return names;\n};\n\n/**\n * Return the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Array} The registered listeners.\n * @public\n */\nEventEmitter.prototype.listeners = function listeners(event) {\n  var evt = prefix ? prefix + event : event\n    , handlers = this._events[evt];\n\n  if (!handlers) return [];\n  if (handlers.fn) return [handlers.fn];\n\n  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {\n    ee[i] = handlers[i].fn;\n  }\n\n  return ee;\n};\n\n/**\n * Return the number of listeners listening to a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Number} The number of listeners.\n * @public\n */\nEventEmitter.prototype.listenerCount = function listenerCount(event) {\n  var evt = prefix ? prefix + event : event\n    , listeners = this._events[evt];\n\n  if (!listeners) return 0;\n  if (listeners.fn) return 1;\n  return listeners.length;\n};\n\n/**\n * Calls each of the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Boolean} `true` if the event had listeners, else `false`.\n * @public\n */\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return false;\n\n  var listeners = this._events[evt]\n    , len = arguments.length\n    , args\n    , i;\n\n  if (listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\n    switch (len) {\n      case 1: return listeners.fn.call(listeners.context), true;\n      case 2: return listeners.fn.call(listeners.context, a1), true;\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n\n    for (i = 1, args = new Array(len -1); i < len; i++) {\n      args[i - 1] = arguments[i];\n    }\n\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length\n      , j;\n\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\n      switch (len) {\n        case 1: listeners[i].fn.call(listeners[i].context); break;\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;\n        default:\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n            args[j - 1] = arguments[j];\n          }\n\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Add a listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.on = function on(event, fn, context) {\n  return addListener(this, event, fn, context, false);\n};\n\n/**\n * Add a one-time listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.once = function once(event, fn, context) {\n  return addListener(this, event, fn, context, true);\n};\n\n/**\n * Remove the listeners of a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn Only remove the listeners that match this function.\n * @param {*} context Only remove the listeners that have this context.\n * @param {Boolean} once Only remove one-time listeners.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return this;\n  if (!fn) {\n    clearEvent(this, evt);\n    return this;\n  }\n\n  var listeners = this._events[evt];\n\n  if (listeners.fn) {\n    if (\n      listeners.fn === fn &&\n      (!once || listeners.once) &&\n      (!context || listeners.context === context)\n    ) {\n      clearEvent(this, evt);\n    }\n  } else {\n    for (var i = 0, events = [], length = listeners.length; i < length; i++) {\n      if (\n        listeners[i].fn !== fn ||\n        (once && !listeners[i].once) ||\n        (context && listeners[i].context !== context)\n      ) {\n        events.push(listeners[i]);\n      }\n    }\n\n    //\n    // Reset the array, or remove it completely if we have no more listeners.\n    //\n    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;\n    else clearEvent(this, evt);\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners, or those of the specified event.\n *\n * @param {(String|Symbol)} [event] The event name.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  var evt;\n\n  if (event) {\n    evt = prefix ? prefix + event : event;\n    if (this._events[evt]) clearEvent(this, evt);\n  } else {\n    this._events = new Events();\n    this._eventsCount = 0;\n  }\n\n  return this;\n};\n\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n//\n// Expose the prefix.\n//\nEventEmitter.prefixed = prefix;\n\n//\n// Allow `EventEmitter` to be imported as module namespace.\n//\nEventEmitter.EventEmitter = EventEmitter;\n\n//\n// Expose the module.\n//\nif ('undefined' !== typeof module) {\n  module.exports = EventEmitter;\n}\n", "export default function isString(value?: any): value is string {\n  return typeof value === 'string';\n}\n", "export default function isObject(value?: any): boolean {\n  return ((value !== null) && (typeof value === 'object'));\n}\n", "export default function symbolObservablePonyfill(root) {\n\tvar result;\n\tvar Symbol = root.Symbol;\n\n\tif (typeof Symbol === 'function') {\n\t\tif (Symbol.observable) {\n\t\t\tresult = Symbol.observable;\n\t\t} else {\n\t\t\tresult = Symbol('observable');\n\t\t\tSymbol.observable = result;\n\t\t}\n\t} else {\n\t\tresult = '@@observable';\n\t}\n\n\treturn result;\n};\n", "/* global window */\nimport ponyfill from './ponyfill.js';\n\nvar root;\n\nif (typeof self !== 'undefined') {\n  root = self;\n} else if (typeof window !== 'undefined') {\n  root = window;\n} else if (typeof global !== 'undefined') {\n  root = global;\n} else if (typeof module !== 'undefined') {\n  root = module;\n} else {\n  root = Function('return this')();\n}\n\nvar result = ponyfill(root);\nexport default result;\n", "const GRAPHQL_WS = 'graphql-ws';\n// NOTE: This protocol is deprecated and will be removed soon.\n/**\n * @deprecated\n */\nconst GRAPHQL_SUBSCRIPTIONS = 'graphql-subscriptions';\n\nexport {\n  GRAPHQL_WS,\n  GRAPHQL_SUBSCRIPTIONS,\n};\n", "const MIN_WS_TIMEOUT = 1000;\nconst WS_TIMEOUT = 30000;\n\nexport {\n  MIN_WS_TIMEOUT,\n  WS_TIMEOUT,\n};\n", "export default class MessageTypes {\n  public static GQL_CONNECTION_INIT = 'connection_init'; // Client -> Server\n  public static GQL_CONNECTION_ACK = 'connection_ack'; // Server -> Client\n  public static GQL_CONNECTION_ERROR = 'connection_error'; // Server -> Client\n\n  // NOTE: The keep alive message type does not follow the standard due to connection optimizations\n  public static GQL_CONNECTION_KEEP_ALIVE = 'ka'; // Server -> Client\n\n  public static GQL_CONNECTION_TERMINATE = 'connection_terminate'; // Client -> Server\n  public static GQL_START = 'start'; // Client -> Server\n  public static GQL_DATA = 'data'; // Server -> Client\n  public static GQL_ERROR = 'error'; // Server -> Client\n  public static GQL_COMPLETE = 'complete'; // Server -> Client\n  public static GQL_STOP = 'stop'; // Client -> Server\n\n  // NOTE: The following message types are deprecated and will be removed soon.\n  /**\n   * @deprecated\n   */\n  public static SUBSCRIPTION_START = 'subscription_start';\n  /**\n   * @deprecated\n   */\n  public static SUBSCRIPTION_DATA = 'subscription_data';\n  /**\n   * @deprecated\n   */\n  public static SUBSCRIPTION_SUCCESS = 'subscription_success';\n  /**\n   * @deprecated\n   */\n  public static SUBSCRIPTION_FAIL = 'subscription_fail';\n  /**\n   * @deprecated\n   */\n  public static SUBSCRIPTION_END = 'subscription_end';\n  /**\n   * @deprecated\n   */\n  public static INIT = 'init';\n  /**\n   * @deprecated\n   */\n  public static INIT_SUCCESS = 'init_success';\n  /**\n   * @deprecated\n   */\n  public static INIT_FAIL = 'init_fail';\n  /**\n   * @deprecated\n   */\n  public static KEEP_ALIVE = 'keepalive';\n\n  constructor() {\n    throw new Error('Static Class');\n  }\n}\n", "declare let window: any;\nconst _global = typeof global !== 'undefined' ? global : (typeof window !== 'undefined' ? window : {});\nconst NativeWebSocket = _global.WebSocket || _global.MozWebSocket;\n\nimport * as Backoff from 'backo2';\nimport { default as EventEmitterType, EventEmitter, ListenerFn } from 'eventemitter3';\nimport isString from './utils/is-string';\nimport isObject from './utils/is-object';\nimport { ExecutionResult } from 'graphql/execution/execute';\nimport { print } from 'graphql/language/printer';\nimport { DocumentNode } from 'graphql/language/ast';\nimport { getOperationAST } from 'graphql/utilities/getOperationAST';\nimport $$observable from 'symbol-observable';\n\nimport { GRAPHQL_WS } from './protocol';\nimport { MIN_WS_TIMEOUT, WS_TIMEOUT } from './defaults';\nimport MessageTypes from './message-types';\n\nexport interface Observer<T> {\n  next?: (value: T) => void;\n  error?: (error: Error) => void;\n  complete?: () => void;\n}\n\nexport interface Observable<T> {\n  subscribe(observer: Observer<T>): {\n    unsubscribe: () => void;\n  };\n}\n\nexport interface OperationOptions {\n  query?: string | DocumentNode;\n  variables?: Object;\n  operationName?: string;\n  [key: string]: any;\n}\n\nexport type FormatedError = Error & {\n  originalError?: any;\n};\n\nexport interface Operation {\n  options: OperationOptions;\n  handler: (error: Error[], result?: any) => void;\n}\n\nexport interface Operations {\n  [id: string]: Operation;\n}\n\nexport interface Middleware {\n  applyMiddleware(options: OperationOptions, next: Function): void;\n}\n\nexport type ConnectionParams = {\n  [paramName: string]: any,\n};\n\nexport type ConnectionParamsOptions = ConnectionParams | Function | Promise<ConnectionParams>;\n\nexport interface ClientOptions {\n  connectionParams?: ConnectionParamsOptions;\n  minTimeout?: number;\n  timeout?: number;\n  reconnect?: boolean;\n  reconnectionAttempts?: number;\n  connectionCallback?: (error: Error[], result?: any) => void;\n  lazy?: boolean;\n  inactivityTimeout?: number;\n  wsOptionArguments?: any[];\n}\n\nexport class SubscriptionClient {\n  public client: any;\n  public operations: Operations;\n  private url: string;\n  private nextOperationId: number;\n  private connectionParams: Function;\n  private minWsTimeout: number;\n  private wsTimeout: number;\n  private unsentMessagesQueue: Array<any>; // queued messages while websocket is opening.\n  private reconnect: boolean;\n  private reconnecting: boolean;\n  private reconnectionAttempts: number;\n  private backoff: any;\n  private connectionCallback: any;\n  private eventEmitter: EventEmitterType;\n  private lazy: boolean;\n  private inactivityTimeout: number;\n  private inactivityTimeoutId: any;\n  private closedByUser: boolean;\n  private wsImpl: any;\n  private wsProtocols: string | string[];\n  private wasKeepAliveReceived: boolean;\n  private tryReconnectTimeoutId: any;\n  private checkConnectionIntervalId: any;\n  private maxConnectTimeoutId: any;\n  private middlewares: Middleware[];\n  private maxConnectTimeGenerator: any;\n  private wsOptionArguments: any[];\n\n  constructor(\n    url: string,\n    options?: ClientOptions,\n    webSocketImpl?: any,\n    webSocketProtocols?: string | string[],\n  ) {\n    const {\n      connectionCallback = undefined,\n      connectionParams = {},\n      minTimeout = MIN_WS_TIMEOUT,\n      timeout = WS_TIMEOUT,\n      reconnect = false,\n      reconnectionAttempts = Infinity,\n      lazy = false,\n      inactivityTimeout = 0,\n      wsOptionArguments = [],\n    } = (options || {});\n\n    this.wsImpl = webSocketImpl || NativeWebSocket;\n    if (!this.wsImpl) {\n      throw new Error('Unable to find native implementation, or alternative implementation for WebSocket!');\n    }\n\n    this.wsProtocols = webSocketProtocols || GRAPHQL_WS;\n    this.connectionCallback = connectionCallback;\n    this.url = url;\n    this.operations = {};\n    this.nextOperationId = 0;\n    this.minWsTimeout = minTimeout;\n    this.wsTimeout = timeout;\n    this.unsentMessagesQueue = [];\n    this.reconnect = reconnect;\n    this.reconnecting = false;\n    this.reconnectionAttempts = reconnectionAttempts;\n    this.lazy = !!lazy;\n    this.inactivityTimeout = inactivityTimeout;\n    this.closedByUser = false;\n    this.backoff = new Backoff({ jitter: 0.5 });\n    this.eventEmitter = new EventEmitter();\n    this.middlewares = [];\n    this.client = null;\n    this.maxConnectTimeGenerator = this.createMaxConnectTimeGenerator();\n    this.connectionParams = this.getConnectionParams(connectionParams);\n    this.wsOptionArguments = wsOptionArguments;\n\n    if (!this.lazy) {\n      this.connect();\n    }\n  }\n\n  public get status() {\n    if (this.client === null) {\n      return this.wsImpl.CLOSED;\n    }\n\n    return this.client.readyState;\n  }\n\n  public close(isForced = true, closedByUser = true) {\n    this.clearInactivityTimeout();\n    if (this.client !== null) {\n      this.closedByUser = closedByUser;\n\n      if (isForced) {\n        this.clearCheckConnectionInterval();\n        this.clearMaxConnectTimeout();\n        this.clearTryReconnectTimeout();\n        this.unsubscribeAll();\n        this.sendMessage(undefined, MessageTypes.GQL_CONNECTION_TERMINATE, null);\n      }\n\n      this.client.close();\n      this.client.onopen = null;\n      this.client.onclose = null;\n      this.client.onerror = null;\n      this.client.onmessage = null;\n      this.client = null;\n      this.eventEmitter.emit('disconnected');\n\n      if (!isForced) {\n        this.tryReconnect();\n      }\n    }\n  }\n\n  public request(request: OperationOptions): Observable<ExecutionResult> {\n    const getObserver = this.getObserver.bind(this);\n    const executeOperation = this.executeOperation.bind(this);\n    const unsubscribe = this.unsubscribe.bind(this);\n\n    let opId: string;\n\n    this.clearInactivityTimeout();\n\n    return {\n      [$$observable]() {\n        return this;\n      },\n      subscribe(\n        observerOrNext: ((Observer<ExecutionResult>) | ((v: ExecutionResult) => void)),\n        onError?: (error: Error) => void,\n        onComplete?: () => void,\n      ) {\n        const observer = getObserver(observerOrNext, onError, onComplete);\n\n        opId = executeOperation(request, (error: Error[], result: any) => {\n          if ( error === null && result === null ) {\n            if ( observer.complete ) {\n              observer.complete();\n            }\n          } else if (error) {\n            if ( observer.error ) {\n              observer.error(error[0]);\n            }\n          } else {\n            if ( observer.next ) {\n              observer.next(result);\n            }\n          }\n        });\n\n        return {\n          unsubscribe: () => {\n            if ( opId ) {\n              unsubscribe(opId);\n              opId = null;\n            }\n          },\n        };\n      },\n    };\n  }\n\n  public on(eventName: string, callback: ListenerFn, context?: any): Function {\n    const handler = this.eventEmitter.on(eventName, callback, context);\n\n    return () => {\n      handler.off(eventName, callback, context);\n    };\n  }\n\n  public onConnected(callback: ListenerFn, context?: any): Function {\n    return this.on('connected', callback, context);\n  }\n\n  public onConnecting(callback: ListenerFn, context?: any): Function {\n    return this.on('connecting', callback, context);\n  }\n\n  public onDisconnected(callback: ListenerFn, context?: any): Function {\n    return this.on('disconnected', callback, context);\n  }\n\n  public onReconnected(callback: ListenerFn, context?: any): Function {\n    return this.on('reconnected', callback, context);\n  }\n\n  public onReconnecting(callback: ListenerFn, context?: any): Function {\n    return this.on('reconnecting', callback, context);\n  }\n\n  public onError(callback: ListenerFn, context?: any): Function {\n    return this.on('error', callback, context);\n  }\n\n  public unsubscribeAll() {\n    Object.keys(this.operations).forEach( subId => {\n      this.unsubscribe(subId);\n    });\n  }\n\n  public applyMiddlewares(options: OperationOptions): Promise<OperationOptions> {\n    return new Promise((resolve, reject) => {\n      const queue = (funcs: Middleware[], scope: any) => {\n        const next = (error?: any) => {\n          if (error) {\n            reject(error);\n          } else {\n            if (funcs.length > 0) {\n              const f = funcs.shift();\n              if (f) {\n                f.applyMiddleware.apply(scope, [options, next]);\n              }\n            } else {\n              resolve(options);\n            }\n          }\n        };\n        next();\n      };\n\n      queue([...this.middlewares], this);\n    });\n  }\n\n  public use(middlewares: Middleware[]): SubscriptionClient {\n    middlewares.map((middleware) => {\n      if (typeof middleware.applyMiddleware === 'function') {\n        this.middlewares.push(middleware);\n      } else {\n        throw new Error('Middleware must implement the applyMiddleware function.');\n      }\n    });\n\n    return this;\n  }\n\n  private getConnectionParams(connectionParams: ConnectionParamsOptions): Function {\n    return (): Promise<ConnectionParams> => new Promise((resolve, reject) => {\n      if (typeof connectionParams === 'function') {\n        try {\n          return resolve(connectionParams.call(null));\n        } catch (error) {\n          return reject(error);\n        }\n      }\n\n      resolve(connectionParams);\n    });\n  }\n\n  private executeOperation(options: OperationOptions, handler: (error: Error[], result?: any) => void): string {\n    if (this.client === null) {\n      this.connect();\n    }\n\n    const opId = this.generateOperationId();\n    this.operations[opId] = { options: options, handler };\n\n    this.applyMiddlewares(options)\n      .then(processedOptions => {\n        this.checkOperationOptions(processedOptions, handler);\n        if (this.operations[opId]) {\n          this.operations[opId] = { options: processedOptions, handler };\n          this.sendMessage(opId, MessageTypes.GQL_START, processedOptions);\n        }\n      })\n      .catch(error => {\n        this.unsubscribe(opId);\n        handler(this.formatErrors(error));\n      });\n\n    return opId;\n  }\n\n  private getObserver<T>(\n    observerOrNext: ((Observer<T>) | ((v: T) => void)),\n    error?: (e: Error) => void,\n    complete?: () => void,\n  ) {\n    if ( typeof observerOrNext === 'function' ) {\n      return {\n        next: (v: T) => observerOrNext(v),\n        error: (e: Error) => error && error(e),\n        complete: () => complete && complete(),\n      };\n    }\n\n    return observerOrNext;\n  }\n\n  private createMaxConnectTimeGenerator() {\n    const minValue = this.minWsTimeout;\n    const maxValue = this.wsTimeout;\n\n    return new Backoff({\n      min: minValue,\n      max: maxValue,\n      factor: 1.2,\n    });\n  }\n\n  private clearCheckConnectionInterval() {\n    if (this.checkConnectionIntervalId) {\n      clearInterval(this.checkConnectionIntervalId);\n      this.checkConnectionIntervalId = null;\n    }\n  }\n\n  private clearMaxConnectTimeout() {\n    if (this.maxConnectTimeoutId) {\n      clearTimeout(this.maxConnectTimeoutId);\n      this.maxConnectTimeoutId = null;\n    }\n    }\n\n  private clearTryReconnectTimeout() {\n    if (this.tryReconnectTimeoutId) {\n      clearTimeout(this.tryReconnectTimeoutId);\n      this.tryReconnectTimeoutId = null;\n    }\n  }\n\n  private clearInactivityTimeout() {\n    if (this.inactivityTimeoutId) {\n      clearTimeout(this.inactivityTimeoutId);\n      this.inactivityTimeoutId = null;\n    }\n  }\n\n  private setInactivityTimeout() {\n    if (this.inactivityTimeout > 0 && Object.keys(this.operations).length === 0) {\n      this.inactivityTimeoutId = setTimeout(() => {\n        if (Object.keys(this.operations).length === 0) {\n          this.close();\n        }\n      }, this.inactivityTimeout);\n    }\n  }\n\n  private checkOperationOptions(options: OperationOptions, handler: (error: Error[], result?: any) => void) {\n    const { query, variables, operationName } = options;\n\n    if (!query) {\n      throw new Error('Must provide a query.');\n    }\n\n    if (!handler) {\n      throw new Error('Must provide an handler.');\n    }\n\n    if (\n      ( !isString(query) && !getOperationAST(query, operationName)) ||\n      ( operationName && !isString(operationName)) ||\n      ( variables && !isObject(variables))\n    ) {\n      throw new Error('Incorrect option types. query must be a string or a document,' +\n        '`operationName` must be a string, and `variables` must be an object.');\n    }\n  }\n\n  private buildMessage(id: string, type: string, payload: any) {\n    const payloadToReturn = payload && payload.query ?\n      {\n        ...payload,\n        query: typeof payload.query === 'string' ? payload.query : print(payload.query),\n      } :\n      payload;\n\n    return {\n      id,\n      type,\n      payload: payloadToReturn,\n    };\n  }\n\n  // ensure we have an array of errors\n  private formatErrors(errors: any): FormatedError[] {\n    if (Array.isArray(errors)) {\n      return errors;\n    }\n\n    // TODO  we should not pass ValidationError to callback in the future.\n    // ValidationError\n    if (errors && errors.errors) {\n      return this.formatErrors(errors.errors);\n    }\n\n    if (errors && errors.message) {\n      return [errors];\n    }\n\n    return [{\n      name: 'FormatedError',\n      message: 'Unknown error',\n      originalError: errors,\n    }];\n  }\n\n  private sendMessage(id: string, type: string, payload: any) {\n    this.sendMessageRaw(this.buildMessage(id, type, payload));\n  }\n\n  // send message, or queue it if connection is not open\n  private sendMessageRaw(message: Object) {\n    switch (this.status) {\n      case this.wsImpl.OPEN:\n        let serializedMessage: string = JSON.stringify(message);\n        try {\n          JSON.parse(serializedMessage);\n        } catch (e) {\n          this.eventEmitter.emit('error', new Error(`Message must be JSON-serializable. Got: ${message}`));\n        }\n\n        this.client.send(serializedMessage);\n        break;\n      case this.wsImpl.CONNECTING:\n        this.unsentMessagesQueue.push(message);\n\n        break;\n      default:\n        if (!this.reconnecting) {\n          this.eventEmitter.emit('error', new Error('A message was not sent because socket is not connected, is closing or ' +\n            'is already closed. Message was: ' + JSON.stringify(message)));\n        }\n    }\n  }\n\n  private generateOperationId(): string {\n    return String(++this.nextOperationId);\n  }\n\n  private tryReconnect() {\n    if (!this.reconnect || this.backoff.attempts >= this.reconnectionAttempts) {\n      return;\n    }\n\n    if (!this.reconnecting) {\n      Object.keys(this.operations).forEach((key) => {\n        this.unsentMessagesQueue.push(\n          this.buildMessage(key, MessageTypes.GQL_START, this.operations[key].options),\n        );\n      });\n      this.reconnecting = true;\n    }\n\n    this.clearTryReconnectTimeout();\n\n    const delay = this.backoff.duration();\n    this.tryReconnectTimeoutId = setTimeout(() => {\n      this.connect();\n    }, delay);\n  }\n\n  private flushUnsentMessagesQueue() {\n    this.unsentMessagesQueue.forEach((message) => {\n      this.sendMessageRaw(message);\n    });\n    this.unsentMessagesQueue = [];\n  }\n\n  private checkConnection() {\n    if (this.wasKeepAliveReceived) {\n      this.wasKeepAliveReceived = false;\n      return;\n    }\n\n    if (!this.reconnecting) {\n      this.close(false, true);\n    }\n  }\n\n  private checkMaxConnectTimeout() {\n    this.clearMaxConnectTimeout();\n\n    // Max timeout trying to connect\n    this.maxConnectTimeoutId = setTimeout(() => {\n      if (this.status !== this.wsImpl.OPEN) {\n        this.reconnecting = true;\n        this.close(false, true);\n      }\n    }, this.maxConnectTimeGenerator.duration());\n  }\n\n  private connect() {\n    this.client = new this.wsImpl(this.url, this.wsProtocols, ...this.wsOptionArguments);\n\n    this.checkMaxConnectTimeout();\n\n    this.client.onopen = async () => {\n      if (this.status === this.wsImpl.OPEN) {\n        this.clearMaxConnectTimeout();\n        this.closedByUser = false;\n        this.eventEmitter.emit(this.reconnecting ? 'reconnecting' : 'connecting');\n\n        try {\n          const connectionParams: ConnectionParams = await this.connectionParams();\n\n          // Send CONNECTION_INIT message, no need to wait for connection to success (reduce roundtrips)\n          this.sendMessage(undefined, MessageTypes.GQL_CONNECTION_INIT, connectionParams);\n          this.flushUnsentMessagesQueue();\n        } catch (error) {\n          this.sendMessage(undefined, MessageTypes.GQL_CONNECTION_ERROR, error);\n          this.flushUnsentMessagesQueue();\n        }\n      }\n    };\n\n    this.client.onclose = () => {\n      if (!this.closedByUser) {\n        this.close(false, false);\n      }\n    };\n\n    this.client.onerror = (err: Error) => {\n      // Capture and ignore errors to prevent unhandled exceptions, wait for\n      // onclose to fire before attempting a reconnect.\n      this.eventEmitter.emit('error', err);\n    };\n\n    this.client.onmessage = ({ data }: {data: any}) => {\n      this.processReceivedData(data);\n    };\n  }\n\n  private processReceivedData(receivedData: any) {\n    let parsedMessage: any;\n    let opId: string;\n\n    try {\n      parsedMessage = JSON.parse(receivedData);\n      opId = parsedMessage.id;\n    } catch (e) {\n      throw new Error(`Message must be JSON-parseable. Got: ${receivedData}`);\n    }\n\n    if (\n      [ MessageTypes.GQL_DATA,\n        MessageTypes.GQL_COMPLETE,\n        MessageTypes.GQL_ERROR,\n      ].indexOf(parsedMessage.type) !== -1 && !this.operations[opId]\n    ) {\n      this.unsubscribe(opId);\n\n      return;\n    }\n\n    switch (parsedMessage.type) {\n      case MessageTypes.GQL_CONNECTION_ERROR:\n        if (this.connectionCallback) {\n          this.connectionCallback(parsedMessage.payload);\n        }\n        break;\n\n      case MessageTypes.GQL_CONNECTION_ACK:\n        this.eventEmitter.emit(this.reconnecting ? 'reconnected' : 'connected', parsedMessage.payload);\n        this.reconnecting = false;\n        this.backoff.reset();\n        this.maxConnectTimeGenerator.reset();\n\n        if (this.connectionCallback) {\n          this.connectionCallback();\n        }\n        break;\n\n      case MessageTypes.GQL_COMPLETE:\n        const handler = this.operations[opId].handler;\n        delete this.operations[opId];\n        handler.call(this, null, null);\n        break;\n\n      case MessageTypes.GQL_ERROR:\n        this.operations[opId].handler(this.formatErrors(parsedMessage.payload), null);\n        delete this.operations[opId];\n        break;\n\n      case MessageTypes.GQL_DATA:\n        const parsedPayload = !parsedMessage.payload.errors ?\n          parsedMessage.payload : {...parsedMessage.payload, errors: this.formatErrors(parsedMessage.payload.errors)};\n        this.operations[opId].handler(null, parsedPayload);\n        break;\n\n      case MessageTypes.GQL_CONNECTION_KEEP_ALIVE:\n        const firstKA = typeof this.wasKeepAliveReceived === 'undefined';\n        this.wasKeepAliveReceived = true;\n\n        if (firstKA) {\n          this.checkConnection();\n        }\n\n        if (this.checkConnectionIntervalId) {\n          clearInterval(this.checkConnectionIntervalId);\n          this.checkConnection();\n        }\n        this.checkConnectionIntervalId = setInterval(this.checkConnection.bind(this), this.wsTimeout);\n        break;\n\n      default:\n        throw new Error('Invalid message type!');\n    }\n  }\n\n  private unsubscribe(opId: string) {\n    if (this.operations[opId]) {\n      delete this.operations[opId];\n      this.setInactivityTimeout();\n      this.sendMessage(opId, MessageTypes.GQL_STOP, undefined);\n    }\n  }\n}\n", "import type { ClientOptions } from \"subscriptions-transport-ws\";\nimport { SubscriptionClient } from \"subscriptions-transport-ws\";\n\nimport type { Operation, FetchResult } from \"../core/index.js\";\nimport { ApolloLink } from \"../core/index.js\";\nimport type { Observable } from \"../../utilities/index.js\";\n\nexport namespace WebSocketLink {\n  /**\n   * Configuration to use when constructing the subscription client (subscriptions-transport-ws).\n   */\n  export interface Configuration {\n    /**\n     * The endpoint to connect to.\n     */\n    uri: string;\n\n    /**\n     * Options to pass when constructing the subscription client.\n     */\n    options?: ClientOptions;\n\n    /**\n     * A custom WebSocket implementation to use.\n     */\n    webSocketImpl?: any;\n  }\n}\n\n// For backwards compatibility.\nexport import WebSocketParams = WebSocketLink.Configuration;\n\nexport class WebSocketLink extends ApolloLink {\n  private subscriptionClient: SubscriptionClient;\n\n  constructor(\n    paramsOrClient: WebSocketLink.Configuration | SubscriptionClient\n  ) {\n    super();\n\n    if (paramsOrClient instanceof SubscriptionClient) {\n      this.subscriptionClient = paramsOrClient;\n    } else {\n      this.subscriptionClient = new SubscriptionClient(\n        paramsOrClient.uri,\n        paramsOrClient.options,\n        paramsOrClient.webSocketImpl\n      );\n    }\n  }\n\n  public request(operation: Operation): Observable<FetchResult> | null {\n    return this.subscriptionClient.request(\n      operation\n    ) as Observable<FetchResult>;\n  }\n}\n"],
  "mappings": "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",
  "names": ["module", "module", "root", "result", "Symbol", "MessageTypes", "SubscriptionClient", "result", "_a", "WebSocketLink"]
}
